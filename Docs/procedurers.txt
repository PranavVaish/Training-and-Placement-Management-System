


------------------------------------------------------------------------



-----------------------------------------------------------------------



--------------------------------------------------------------------

--Stored Procedure: InsertInterviewSchedule


DELIMITER //

CREATE PROCEDURE InsertInterviewSchedule (
    IN p_ApplicationID INT,
    IN p_Interview_Time TIME,
    IN p_Mode VARCHAR(50),
    IN p_Platform VARCHAR(100),
    IN p_Interview_Link VARCHAR(255)
)
BEGIN
    DECLARE v_Interview_ID INT;
    DECLARE v_Job_ID INT;
    DECLARE id_exists INT DEFAULT 1;

    -- Step 1: Check if application exists and get Job_ID
    SELECT Job_ID INTO v_Job_ID
    FROM Application
    WHERE Application_ID = p_ApplicationID;

    -- Step 2: Generate a unique Interview_ID
    WHILE id_exists = 1 DO
        SET v_Interview_ID = FLOOR(100000 + (RAND() * 900000)); -- 6-digit random ID
        SELECT COUNT(*) INTO id_exists
        FROM Interview_Schedule
        WHERE Interview_ID = v_Interview_ID;
    END WHILE;

    -- Step 3: Insert into Interview_Schedule with NULL date
    INSERT INTO Interview_Schedule (
        Interview_ID, Job_ID, Interview_Date,
        Interview_Time, Mode, Platform, Interview_Link
    ) VALUES (
        v_Interview_ID, v_Job_ID, NULL,
        p_Interview_Time, p_Mode, p_Platform, p_Interview_Link
    );

    -- Step 4: Update Application table to link this interview
    UPDATE Application
    SET Interview_Schedule = v_Interview_ID
    WHERE Application_ID = p_ApplicationID;
END //

DELIMITER ;

-------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------------------

--

DELIMITER $$

CREATE PROCEDURE GetPlacementReport()
BEGIN
    -- Declare variables
    DECLARE current_year INT DEFAULT YEAR(CURDATE());
    DECLARE current_date DATE DEFAULT CURDATE();
    DECLARE prev_year INT DEFAULT YEAR(CURDATE()) - 1;
    DECLARE same_date_prev_year DATE DEFAULT DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
    
    -- Current year totals
    DECLARE total_current INT DEFAULT 0;
    DECLARE total_prev INT DEFAULT 0;
    DECLARE percent_change_total DECIMAL(10,2);
    
    -- Average package
    DECLARE avg_package_current DECIMAL(10,2) DEFAULT 0;
    DECLARE avg_package_prev DECIMAL(10,2) DEFAULT 0;
    DECLARE percent_change_package DECIMAL(10,2);
    
    -- Placement rate
    DECLARE total_students INT DEFAULT 0;
    DECLARE placed_students_current INT DEFAULT 0;
    DECLARE placed_students_prev INT DEFAULT 0;
    DECLARE placement_rate_current DECIMAL(10,2) DEFAULT 0;
    DECLARE placement_rate_prev DECIMAL(10,2) DEFAULT 0;
    DECLARE percent_change_rate DECIMAL(10,2);
    
    -- Get total placements for current year till today
    SELECT COUNT(*) INTO total_current
    FROM Placement_Record
    WHERE YEAR(Placement_Date) = current_year AND Placement_Date <= current_date;
    
    -- Get total placements for previous year till same date
    SELECT COUNT(*) INTO total_prev
    FROM Placement_Record
    WHERE YEAR(Placement_Date) = prev_year AND Placement_Date <= same_date_prev_year;
    
    -- Calculate percentage change in placements
    IF total_prev = 0 THEN
        SET percent_change_total = 100;
    ELSE
        SET percent_change_total = ((total_current - total_prev) / total_prev) * 100;
    END IF;
    
    -- Get average package for current year
    SELECT IFNULL(AVG(Package), 0) INTO avg_package_current
    FROM Placement_Record
    WHERE YEAR(Placement_Date) = current_year AND Placement_Date <= current_date;
    
    -- Get average package for previous year
    SELECT IFNULL(AVG(Package), 0) INTO avg_package_prev
    FROM Placement_Record
    WHERE YEAR(Placement_Date) = prev_year AND Placement_Date <= same_date_prev_year;
    
    -- Calculate percentage change in package
    IF avg_package_prev = 0 THEN
        SET percent_change_package = 100;
    ELSE
        SET percent_change_package = ((avg_package_current - avg_package_prev) / avg_package_prev) * 100;
    END IF;
    
    -- Get total students
    SELECT COUNT(*) INTO total_students FROM Student;
    
    -- Get placed students current year till today
    SELECT COUNT(DISTINCT Student_ID) INTO placed_students_current
    FROM Placement_Record
    WHERE YEAR(Placement_Date) = current_year AND Placement_Date <= current_date;
    
    -- Get placed students previous year till same date
    SELECT COUNT(DISTINCT Student_ID) INTO placed_students_prev
    FROM Placement_Record
    WHERE YEAR(Placement_Date) = prev_year AND Placement_Date <= same_date_prev_year;
    
    -- Calculate placement rate current
    IF total_students = 0 THEN
        SET placement_rate_current = 0;
    ELSE
        SET placement_rate_current = (placed_students_current / total_students) * 100;
    END IF;
    
    -- Calculate placement rate previous
    IF total_students = 0 THEN
        SET placement_rate_prev = 0;
    ELSE
        SET placement_rate_prev = (placed_students_prev / total_students) * 100;
    END IF;
    
    -- Calculate percentage change in placement rate
    IF placement_rate_prev = 0 THEN
        SET percent_change_rate = 100;
    ELSE
        SET percent_change_rate = ((placement_rate_current - placement_rate_prev) / placement_rate_prev) * 100;
    END IF;
    
    -- Final output
    SELECT 
        total_current AS Total_Placement_Current_Year,
        percent_change_total AS Percentage_Change_in_Total_Placement,
        avg_package_current AS Average_Package_Current_Year,
        percent_change_package AS Percentage_Change_in_Package,
        placement_rate_current AS Placement_Rate_Current_Year,
        percent_change_rate AS Percentage_Change_in_Placement_Rate;
    
END$$

DELIMITER ;

--------------------------------------------------------------------------------------------------------------

-- Stored Procedure: Get Top 5 Industries by Placement Count


DELIMITER $$

CREATE PROCEDURE GetTop5IndustriesByPlacement()
BEGIN
    SELECT 
        c.Industry_Type,
        COUNT(pr.Placement_ID) AS No_of_Placements
    FROM 
        Placement_Record pr
    JOIN 
        Company c ON pr.Company_ID = c.Company_ID
    GROUP BY 
        c.Industry_Type
    ORDER BY 
        No_of_Placements DESC
    LIMIT 5;
END$$

DELIMITER ;

--------------------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------

--Stored Procedure: Retrieve Total Number of Students

DELIMITER $$

CREATE PROCEDURE GetTotalStudents()
BEGIN
    SELECT COUNT(*) AS Total_Students FROM Student;
END$$

DELIMITER ;

----------------------------------------------------------------------------------------------------

--Stored Procedure: Retrieve Total Number of Companies Registered

DELIMITER $$

CREATE PROCEDURE GetTotalCompanies()
BEGIN
    SELECT COUNT(*) AS Total_Companies FROM Company;
END$$

DELIMITER ;

----------------------------------------------------------------------------------------------------

--Stored Procedure: Get Number of Active Training Programs

DELIMITER $$

CREATE PROCEDURE GetActiveTrainingPrograms()
BEGIN
    SELECT COUNT(*) AS Active_Programs
    FROM Training_Program
    WHERE CURDATE() BETWEEN Start_Date AND End_Date;
END$$

DELIMITER ;

-----------------------------------------------------------------------------------------------------

--Stored Procedure: Get Total Placements This Year

DELIMITER $$

CREATE PROCEDURE GetTotalPlacementsThisYear()
BEGIN
    SELECT COUNT(*) AS Total_Placements
    FROM Placement_Record
    WHERE YEAR(Placement_Date) = YEAR(CURDATE());
END$$

DELIMITER ;

-------------------------------------------------------------------------------------------------------

--stored procedure for distinct department

DELIMITER $$

CREATE PROCEDURE GetDistinctDepartments()
BEGIN
    SELECT DISTINCT Department 
    FROM Student
    ORDER BY Department;
END$$

DELIMITER ;

------------------------------------------------------------------------------------------------------
