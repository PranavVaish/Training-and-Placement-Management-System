-------------------------------------------------------------------------------

DELIMITER //

CREATE PROCEDURE AddJobWithMultipleDetails(
    IN p_JobID INT,
    IN p_JobTitle VARCHAR(100),
    IN p_JobDescription TEXT,
    IN p_Salary DECIMAL(10,2),
    IN p_CompanyID INT,
    IN p_JobType VARCHAR(50),
    IN p_Vacancies INT,
    IN p_ApplicationDeadline DATE,
    IN p_EligibilityCriteriaList TEXT,   -- comma-separated
    IN p_LocationList TEXT               -- comma-separated
)
BEGIN
    DECLARE i INT DEFAULT 1;
    DECLARE total_eligibility INT;
    DECLARE total_location INT;
    DECLARE criterion VARCHAR(100);
    DECLARE location VARCHAR(100);

    -- Insert into Job table
    INSERT INTO Job (Job_ID, Job_Title, Job_Description, Salary, Company_ID, Job_Type, Vacancies, Application_Deadline)
    VALUES (p_JobID, p_JobTitle, p_JobDescription, p_Salary, p_CompanyID, p_JobType, p_Vacancies, p_ApplicationDeadline);

    -- Count how many items are in the comma-separated strings
    SET total_eligibility = LENGTH(p_EligibilityCriteriaList) - LENGTH(REPLACE(p_EligibilityCriteriaList, ',', '')) + 1;
    SET total_location = LENGTH(p_LocationList) - LENGTH(REPLACE(p_LocationList, ',', '')) + 1;

    -- Insert into Job_Eligibility
    SET i = 1;
    WHILE i <= total_eligibility DO
        SET criterion = TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(p_EligibilityCriteriaList, ',', i), ',', -1));
        INSERT INTO Job_Eligibility (Job_ID, Eligibility_Criterion)
        VALUES (p_JobID, criterion);
        SET i = i + 1;
    END WHILE;

    -- Insert into Job_Location
    SET i = 1;
    WHILE i <= total_location DO
        SET location = TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(p_LocationList, ',', i), ',', -1));
        INSERT INTO Job_Location (Job_ID, Location)
        VALUES (p_JobID, location);
        SET i = i + 1;
    END WHILE;
END //

DELIMITER ;

------------------------------------------------------------------------------------

--Stored Procedure: AddTrainingProgram

DELIMITER //

CREATE PROCEDURE AddTrainingProgram(
    IN p_TrainingID INT,
    IN p_TrainingName VARCHAR(100),
    IN p_TrainingDescription TEXT,
    IN p_Duration INT,
    IN p_TrainerID INT,
    IN p_StartDate DATE,
    IN p_EndDate DATE,
    IN p_Mode VARCHAR(50),
    IN p_CertificationProvided BOOLEAN,
    IN p_TrainingCost DECIMAL(10,2)
)
BEGIN
    -- Insert into Training_Program table
    INSERT INTO Training_Program (
        Training_ID, Training_Name, Training_Description,
        Duration, Trainer_ID, Start_Date, End_Date,
        Mode, Certification_Provided, Training_Cost
    )
    VALUES (
        p_TrainingID, p_TrainingName, p_TrainingDescription,
        p_Duration, p_TrainerID, p_StartDate, p_EndDate,
        p_Mode, p_CertificationProvided, p_TrainingCost
    );
END //

DELIMITER ;

--------------------------------------------------------------------------------

--Stored Procedure: EnrollStudentInTraining

DELIMITER //

CREATE PROCEDURE EnrollStudentInTraining(
    IN p_EnrollmentID INT,
    IN p_TrainingID INT,
    IN p_StudentID INT,
    IN p_PerformanceGrade VARCHAR(10),
    IN p_CompletionStatus VARCHAR(20)
)
BEGIN
    -- Insert into Training_Enrollment table
    INSERT INTO Training_Enrollment (
        Enrollment_ID, Training_ID, Student_ID,
        Performance_Grade, Completion_Status
    )
    VALUES (
        p_EnrollmentID, p_TrainingID, p_StudentID,
        p_PerformanceGrade, p_CompletionStatus
    );
END //

DELIMITER ;

--------------------------------------------------------------------------------

--ADD FEEDBACK

DELIMITER //

CREATE PROCEDURE AddFeedback (
    IN p_Feedback_ID INT,
    IN p_Student_ID INT,
    IN p_Company_ID INT,
    IN p_Rating INT,
    IN p_Comments TEXT,
    IN p_Feedback_Type VARCHAR(50),
    IN p_Trainer_ID INT
)
BEGIN
    -- Check if Student exists
    IF EXISTS (SELECT 1 FROM Student WHERE Student_ID = p_Student_ID) AND
       EXISTS (SELECT 1 FROM Company WHERE Company_ID = p_Company_ID) AND
       EXISTS (SELECT 1 FROM Trainer WHERE Trainer_ID = p_Trainer_ID) THEN
       
        INSERT INTO Feedback (Feedback_ID, Student_ID, Company_ID, Rating, Comments, Feedback_Type, Trainer_ID)
        VALUES (p_Feedback_ID, p_Student_ID, p_Company_ID, p_Rating, p_Comments, p_Feedback_Type, p_Trainer_ID);
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid Student_ID, Company_ID, or Trainer_ID';
    END IF;
END //

DELIMITER ;

--------------------------------------------------------------------------------------

--ADD APPLICATION

DELIMITER //

CREATE PROCEDURE AddApplication (
    IN p_Application_ID INT,
    IN p_Student_ID INT,
    IN p_Job_ID INT,
    IN p_Application_Date DATE,
    IN p_Interview_Schedule INT,
    IN p_Status VARCHAR(50)
)
BEGIN
    -- Check if Student, Job, and Interview_Schedule records exist
    IF EXISTS (SELECT 1 FROM Student WHERE Student_ID = p_Student_ID) AND
       EXISTS (SELECT 1 FROM Job WHERE Job_ID = p_Job_ID) AND
       EXISTS (SELECT 1 FROM Interview_Schedule WHERE Interview_ID = p_Interview_Schedule) THEN
       
        INSERT INTO Application (Application_ID, Student_ID, Job_ID, Application_Date, Interview_Schedule, Status)
        VALUES (p_Application_ID, p_Student_ID, p_Job_ID, p_Application_Date, p_Interview_Schedule, p_Status);
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid Student_ID, Job_ID, or Interview_Schedule ID';
    END IF;
END //

DELIMITER ;

-------------------------------------------------------------------------------------

-- ADD PLACEMENT RECORD

DELIMITER //

CREATE PROCEDURE AddPlacementRecord (
    IN p_Placement_ID INT,
    IN p_Student_ID INT,
    IN p_Job_ID INT,
    IN p_Company_ID INT,
    IN p_Package DECIMAL(10,2),
    IN p_Placement_Date DATE,
    IN p_Placement_Location VARCHAR(100)
)
BEGIN
    -- Check if Student, Job, and Company records exist
    IF EXISTS (SELECT 1 FROM Student WHERE Student_ID = p_Student_ID) AND
       EXISTS (SELECT 1 FROM Job WHERE Job_ID = p_Job_ID) AND
       EXISTS (SELECT 1 FROM Company WHERE Company_ID = p_Company_ID) THEN
       
        INSERT INTO Placement_Record (Placement_ID, Student_ID, Job_ID, Company_ID, Package, Placement_Date, Placement_Location)
        VALUES (p_Placement_ID, p_Student_ID, p_Job_ID, p_Company_ID, p_Package, p_Placement_Date, p_Placement_Location);
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid Student_ID, Job_ID, or Company_ID';
    END IF;
END //

DELIMITER ;

---------------------------------------------------------------------------------------

